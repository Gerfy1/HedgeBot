import { WASocket } from "baileys";
import { TwitchController } from "../controllers/twitch.controller.js";
import { GroupController } from "../controllers/group.controller.js";
import { Bot } from "../interfaces/bot.interface.js";
import * as twitchUtil from "../utils/twitch.util.js";
import * as waUtil from "../utils/whatsapp.util.js";
import { buildText } from "../utils/general.util";

let monitorInterval: NodeJS.Timeout | null = null;

const RATE_LIMIT_DELAY = 2000; 
const MAX_RETRIES = 3;
const RETRY_DELAYS = [5000, 10000, 20000]; 

export function startTwitchMonitor(client: WASocket, botInfo: Bot) {
    const twitchController = new TwitchController();
    const config = twitchController.getConfig();

    if (!config.enabled || !config.streamer_name || !config.client_id || !config.client_secret){
        console.log('‚ö†Ô∏è Monitor Twitch n√£o iniciado - configura√ß√£o incompleta')
        return
    }

    if (monitorInterval) {
        clearInterval(monitorInterval);
    }

    console.log(`üéÆ Monitor Twitch iniciado para ${config.streamer_name}`)

    console.log('üîç Verificando status atual da stream...')
    checkStreamStatus(client, botInfo, true) 

    monitorInterval = setInterval(async () =>{
        await checkStreamStatus(client, botInfo, false) 
    }, config.check_interval * 60 * 1000)
}

export function stopTwitchMonitor() {
    if (monitorInterval) {
        clearInterval(monitorInterval);
        monitorInterval = null;
        console.log('üõë Monitor Twitch parado')
    }
}

async function checkStreamStatus(client: WASocket, botInfo: Bot, isInitialCheck: boolean = false){
    try{
        const twitchController = new TwitchController();
        const groupController = new GroupController();
        const config = twitchController.getConfig();

        if (!config.target_group) return

        if (!config.access_token){
            const accessToken = await twitchUtil.getTwitchAccessToken(config.client_id, config.client_secret)
            twitchController.setAccessToken(accessToken)
            config.access_token = accessToken
        } 

        const streamData = await twitchUtil.getStreamData(config.streamer_name, config.client_id, config.access_token)
        const isCurrentlyLive = streamData !== null
        const wasLive = config.is_live

        if (isInitialCheck) {
            console.log(`üîç Status inicial: ${isCurrentlyLive ? 'üî¥ ONLINE' : '‚ö´ OFFLINE'}`)
            if (isCurrentlyLive && streamData) {
                console.log(`üì∫ Jogo: ${streamData.game_name || 'N/A'}`)
                console.log(`üìù T√≠tulo: ${streamData.tittle}`) 
            }
        }
        if (isCurrentlyLive !== wasLive || (isInitialCheck && isCurrentlyLive)) {
            twitchController.setLiveStatus(isCurrentlyLive)

            if (isCurrentlyLive && streamData) {
                if (isInitialCheck) {
                    console.log(`üî¥ ${streamData.user_name} j√° est√° AO VIVO! Aplicando configura√ß√µes...`)
                } else {
                    console.log(`üî¥ ${streamData.user_name} entrou AO VIVO! Processando...`)
                }
                await handleStreamOnline(client, botInfo, streamData, config.target_group, isInitialCheck)
            } else if (!isCurrentlyLive && !isInitialCheck) {
                await handleStreamOffline(client, botInfo, config.target_group)
            }
        } else if (isInitialCheck) {
            console.log(`‚ö´ ${config.streamer_name} est√° offline - aguardando...`)
        }
    } catch (error){
        console.error('Erro no monitor Twitch:', error)
    }
}        

async function executeWithRetry<T>(
    operation: () => Promise<T>, 
    operationName: string, 
    maxRetries: number = MAX_RETRIES
): Promise<T | null> {
    for (let attempt = 0; attempt <= maxRetries; attempt++) {
        try {
            if (attempt > 0) {
                const delay = RETRY_DELAYS[attempt - 1] || 20000
                console.log(`üîÑ Tentativa ${attempt + 1}/${maxRetries + 1} para ${operationName} em ${delay/1000}s...`)
                await new Promise(resolve => setTimeout(resolve, delay))
            }

            const result = await operation()
            if (attempt > 0) {
                console.log(`‚úÖ ${operationName} realizada com sucesso na tentativa ${attempt + 1}`)
            }
            return result

        } catch (error: any) {
            if (attempt === maxRetries) {
                console.error(`‚ùå Falha definitiva em ${operationName} ap√≥s ${maxRetries + 1} tentativas:`, error?.message || error)
                return null
            }

            if (error?.message?.includes('rate-overlimit') || error?.data === 429) {
                console.log(`‚ö†Ô∏è Rate limit detectado em ${operationName}, tentando novamente...`)
            } else {
                console.error(`‚ö†Ô∏è Erro em ${operationName} (tentativa ${attempt + 1}):`, error?.message || error)
            }
        }
    }
    return null
}

async function handleStreamOnline(client: WASocket, botInfo: Bot, streamData: any, groupId: string, isInitialCheck: boolean = false){
    try {
        const groupController = new GroupController();
        const group = await groupController.getGroup(groupId)
        
        if (!group) return

        const actionText = isInitialCheck ? "Aplicando configura√ß√µes de live..." : "Processando nova live..."
        console.log(`üî¥ ${streamData.user_name} - ${actionText}`)

        const notificationText = isInitialCheck ? 
            `üî¥ ùêãùêàùêïùêÑ ùêÑùêå ùêÄùêçùêÉùêÄùêåùêÑùêçùêìùêé!\n\n` +
            `üéÆ ${streamData.user_name} est√° AO VIVO!\n\n` +
            `üéØ ùêâùê®ùê†ùê®: ${streamData.game_name || 'Categoria n√£o definida'}\n` +
            `üì∫ ùêì√≠ùê≠ùêÆùê•ùê®: ${streamData.title}\n\n` +
            `‚è≥ _Configurando chat para live..._\n\n` +
            `ü¶î _Monitor Twitch ativado pelo HedgeBot_`
            :
            `üî¥ ùêãùêàùêïùêÑ ùêàùêçùêàùêÇùêàùêÄùêÉùêÄ!\n\n` +
            `üéÆ ${streamData.user_name} est√° AO VIVO!\n\n` +
            `üéØ ùêâùê®ùê†ùê®: ${streamData.game_name || 'Categoria n√£o definida'}\n` +
            `üì∫ ùêì√≠ùê≠ùêÆùê•ùê®: ${streamData.title}\n\n` +
            `‚è≥ _Configurando chat para live..._\n\n` +
            `ü¶î _Notifica√ß√£o autom√°tica do HedgeBot_`

        const mainMessageSent = await executeWithRetry(async () => {
            return await waUtil.sendText(client, groupId, notificationText, {expiration: group.expiration})
        }, "envio da mensagem principal")

        if (!mainMessageSent) {
            console.log(`üî¥ ‚ö†Ô∏è Falha ao enviar mensagem principal - abortando configura√ß√µes`)
            return
        }

        const twitchUrl = `https://twitch.tv/${streamData.user_login}`
        const linkMessage = `üé¨ ùñ†ùñ≤ùñ≤ùñ®ùñ≤ùñ≥ùñ† ùñ†ùñ¶ùñÆùñ±ùñ†: ${twitchUrl}`

        const linkSent = await executeWithRetry(async () => {
            return await waUtil.sendLinkWithRetryPreview(client, groupId, linkMessage, {expiration: group.expiration})
        }, "envio do link com preview")

        await new Promise(resolve => setTimeout(resolve, RATE_LIMIT_DELAY))

        const newTitle = group.name.startsWith('[ON]') ? group.name : `[ON] ${group.name}`
        
        if (!group.name.startsWith('[ON]')) {
            await executeWithRetry(async () => {
                await client.groupUpdateSubject(groupId, newTitle)
                await groupController.setNameGroup(groupId, newTitle)
            }, "atualiza√ß√£o do t√≠tulo do grupo")

            await new Promise(resolve => setTimeout(resolve, RATE_LIMIT_DELAY))
        } else {
            console.log(`üìù T√≠tulo j√° est√° com [ON], pulando atualiza√ß√£o`)
        }
        if (!group.restricted) {
            await executeWithRetry(async () => {
                await client.groupSettingUpdate(groupId, 'announcement')
                await groupController.setRestrictedGroup(groupId, true)
            }, "restri√ß√£o do grupo")

            console.log(`üîí Chat restrito! Apenas admins podem falar durante a live`)
        } else {
            console.log(`üîí Grupo j√° est√° restrito, pulando restri√ß√£o`)
        }

        const confirmationText = `üîí ùêÇùêáùêÄùêì ùêëùêÑùêíùêìùêëùêàùêìùêé ùêÉùêîùêëùêÄùêçùêìùêÑ ùêÄ ùêãùêàùêïùêÑ\n\n` +
            `‚ö° Apenas admins podem falar agora\n` +
            `üé¨ Aproveitem a live!\n\n` +
            `ü¶î _HedgeBot Monitor ativado_`

        await executeWithRetry(async () => {
            return await waUtil.sendText(client, groupId, confirmationText, {expiration: group.expiration})
        }, "envio da confirma√ß√£o de restri√ß√£o")

        const successText = isInitialCheck ? "configura√ß√µes aplicadas" : "processada"
        console.log(`üî¥ ‚úÖ Live de ${streamData.user_name} ${successText} com sucesso!`)

    } catch (error) {
        console.error('Erro ao processar stream online:', error)
    }       
}


async function handleStreamOffline(client: WASocket, botInfo: Bot, groupId: string) {
   try {
        const groupController = new GroupController()
        const twitchController = new TwitchController()
        const group = await groupController.getGroup(groupId)
        const config = twitchController.getConfig()
        
        if (!group) return

        console.log(`‚ö´ Stream finalizada. Processando...`)

        const newTitle = group.name.replace(/^\[ON\]\s*/, '')
        
        await executeWithRetry(async () => {
            await client.groupUpdateSubject(groupId, newTitle)
            await groupController.setNameGroup(groupId, newTitle)
        }, "remo√ß√£o da tag do t√≠tulo")

        await new Promise(resolve => setTimeout(resolve, RATE_LIMIT_DELAY))

        await executeWithRetry(async () => {
            await client.groupSettingUpdate(groupId, 'not_announcement')
            await groupController.setRestrictedGroup(groupId, false)
        }, "libera√ß√£o do grupo")

        console.log(`üí¨ Chat liberado! Todos podem falar novamente`)

        await new Promise(resolve => setTimeout(resolve, RATE_LIMIT_DELAY))

        const notification = `‚ö´ ùêãùêàùêïùêÑ ùêÖùêàùêçùêÄùêãùêàùêôùêÄùêÉùêÄ\n\n` +
            `üì∫ A live foi encerrada!\n` +
            `‚ù§Ô∏è Obrigado por assistir!\n\n` +
            `üí¨ ùêÇùêáùêÄùêì ùêãùêàùêÅùêÑùêëùêÄùêÉùêé ùêèùêÄùêëùêÄ ùêìùêéùêÉùêéùêí\n` +
            `üéâ Podem conversar √† vontade agora!\n\n` +
            `ü¶î _Notifica√ß√£o autom√°tica do HedgeBot_`

        const mainMessageSent = await executeWithRetry(async () => {
            return await waUtil.sendText(client, groupId, notification, { expiration: group.expiration })
        }, "envio da notifica√ß√£o principal")

        const recordingUrl = `https://twitch.tv/${config.streamer_name}/videos`
        const recordingMessage = `üéûÔ∏è ùï¨ùñòùñòùñéùñòùñôùñÜ ùñÜ ùñåùñóùñÜùñõùñÜ√ß√£ùñî: ${recordingUrl}`

        const recordingLinkSent = await executeWithRetry(async () => {
            return await waUtil.sendLinkWithRetryPreview(client, groupId, recordingMessage, { expiration: group.expiration })
        }, "envio do link de grava√ß√£o com preview")

        if (mainMessageSent && recordingLinkSent) {
            console.log(`‚ö´ ‚úÖ Fim da live processado com sucesso!`)
        } else {
            console.log(`‚ö´ ‚ö†Ô∏è Fim da live processado parcialmente`)
        }

    } catch (error) {
        console.error('Erro ao processar stream offline:', error)
    }

}